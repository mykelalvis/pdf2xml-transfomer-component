~~
~~ Copyright (C) 2015 Cotiviti Labs (nexgen.admin@cotiviti.io)
~~
~~ The software code contained herein is the property of Cotiviti Corporation
~~ and its subsidiaries and affiliates (collectively, “Cotiviti”).
~~ Access to this software code is being provided to you in the course of your
~~ employment or affiliation with Cotiviti and may be used solely in the scope
~~ and course of your work for Cotiviti, and is for internal Cotiviti use only.
~~ Any unauthorized use, disclosure, copying, distribution, destruction of this
~~ software code, or the taking of any unauthorized action in reliance on this
~~ software code, is strictly prohibited.
~~ If this information is viewed in error, immediately discontinue use of the
~~ application.  Anyone using this software code and the applications will be
~~ subject to monitoring for improper use, system maintenance and security
~~ purposes, and is advised that if such monitoring reveals possible criminal
~~ activity or policy violation, Cotiviti personnel may provide the evidence of
~~ such monitoring to law enforcement or other officials, and the user may be
~~ subject to disciplinary action by Cotiviti, up to and including termination
~~ of employment.
~~
~~ Use of this software code and any applications and information therein
~~ constitutes acknowledgement of and consent to this notice
~~

 ------
 Introduction
 ------
 Zarar Siddiqi
 ------
 2007-07-18
 ------


Properties Maven Plugin

  The Properties Maven Plugin is here to make life a little easier when dealing
  with properties.  It provides goals to read properties from files and URLs and write
  properties to files, and also to set system properties.

  It's main use-case is loading properties from files or URLs instead of declaring them in
  <pom.xml>, something that comes in handy when dealing with different environments.

  If you have a properties file called <teams.properties> with this content:

----------------------------------------
  toronto=raptors
  miami=heat
----------------------------------------

  and invoke the {{{./read-project-properties-mojo.html}properties:read-project-properties}}
  goal, it would be the same as declaring the following in your <pom.xml>:

----------------------------------------
  <properties>
    <toronto>raptors</toronto>
    <miami>heat</miami>
  </properties>
----------------------------------------

  The properties loaded from files or URLs can be used to filter resources
  differently for different environments.  Those using Spring's
  {{{http://www.springframework.org/docs/api/org/springframework/beans/factory/config/PropertyResourceConfigurer.html}PropertyPlaceholderConfigurer}}
  can see how these goals can be useful. Note that the URL format accepts
  Spring's classpath: style pseudo-URL syntax.

* Goals Overview

~~  General Information about the goals.

  * {{{./read-project-properties-mojo.html}properties:read-project-properties}} Reads property
    files or properties from URLs as Project properties.

  * {{{./write-project-properties-mojo.html}properties:write-project-properties}} Writes project
    properties to a file.

  * {{{./write-active-profile-properties-mojo.html}properties:write-active-profile-properties}} Writes
    properties of all active profiles to a file.

  * {{{./set-system-properties-mojo.html}properties:set-system-properties}} Sets system properties.


* Usage

  Instructions on how to use the Properties Maven Plugin can be found {{{./usage.html}here}}.
